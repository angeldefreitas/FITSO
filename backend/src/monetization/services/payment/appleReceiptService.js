const axios = require('axios');

class AppleReceiptService {
  constructor() {
    // URLs de Apple para validaci√≥n de recibos
    this.productionUrl = 'https://buy.itunes.apple.com/verifyReceipt';
    this.sandboxUrl = 'https://sandbox.itunes.apple.com/verifyReceipt';
    
    // Password compartido de App Store Connect (debe configurarse en variables de entorno)
    this.sharedSecret = process.env.APPLE_SHARED_SECRET;
    
    if (!this.sharedSecret) {
      console.warn('‚ö†Ô∏è APPLE_SHARED_SECRET no configurado en variables de entorno');
    }
  }

  /**
   * Valida un recibo de Apple Store
   * @param {string} receiptData - Datos del recibo en base64
   * @param {boolean} isSandbox - Si es sandbox o producci√≥n
   * @returns {Promise<Object>} - Resultado de la validaci√≥n
   */
  async validateReceipt(receiptData, isSandbox = false) {
    try {
      console.log('üçé Validando recibo de Apple...', { isSandbox });
      
      const url = isSandbox ? this.sandboxUrl : this.productionUrl;
      
      const requestBody = {
        'receipt-data': receiptData,
        'password': this.sharedSecret,
        'exclude-old-transactions': true
      };

      const response = await axios.post(url, requestBody, {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 10000 // 10 segundos timeout
      });

      const result = response.data;
      console.log('üì± Respuesta de Apple:', { status: result.status, environment: result.environment });

      // Si el recibo es de sandbox pero estamos en producci√≥n, intentar con sandbox
      if (result.status === 21007 && !isSandbox) {
        console.log('üîÑ Recibo de sandbox detectado, reintentando con sandbox...');
        return await this.validateReceipt(receiptData, true);
      }

      // Si el recibo es de producci√≥n pero estamos en sandbox, intentar con producci√≥n
      if (result.status === 21008 && isSandbox) {
        console.log('üîÑ Recibo de producci√≥n detectado, reintentando con producci√≥n...');
        return await this.validateReceipt(receiptData, false);
      }

      return this.processAppleResponse(result);
    } catch (error) {
      console.error('‚ùå Error validando recibo de Apple:', error.message);
      throw new Error(`Error validando recibo: ${error.message}`);
    }
  }

  /**
   * Procesa la respuesta de Apple y extrae informaci√≥n de suscripci√≥n
   * @param {Object} appleResponse - Respuesta de Apple
   * @returns {Object} - Informaci√≥n procesada de la suscripci√≥n
   */
  processAppleResponse(appleResponse) {
    const { status, receipt, latest_receipt_info, pending_renewal_info } = appleResponse;

    // Verificar estado de la respuesta
    if (status !== 0) {
      const errorMessage = this.getStatusErrorMessage(status);
      throw new Error(`Error de Apple: ${errorMessage} (${status})`);
    }

    // Verificar que hay informaci√≥n de recibos
    if (!receipt || !latest_receipt_info || latest_receipt_info.length === 0) {
      throw new Error('No se encontr√≥ informaci√≥n de suscripci√≥n en el recibo');
    }

    // Buscar la suscripci√≥n m√°s reciente
    const latestReceipt = latest_receipt_info[latest_receipt_info.length - 1];
    
    // Verificar que es una suscripci√≥n v√°lida
    if (!this.isValidSubscription(latestReceipt)) {
      throw new Error('El recibo no contiene una suscripci√≥n v√°lida');
    }

    // Extraer informaci√≥n de la suscripci√≥n
    const subscriptionInfo = {
      productId: latestReceipt.product_id,
      transactionId: latestReceipt.transaction_id,
      originalTransactionId: latestReceipt.original_transaction_id,
      purchaseDate: new Date(parseInt(latestReceipt.purchase_date_ms)),
      expiresDate: new Date(parseInt(latestReceipt.expires_date_ms)),
      isTrialPeriod: latestReceipt.is_trial_period === 'true',
      isInIntroOfferPeriod: latestReceipt.is_in_intro_offer_period === 'true',
      environment: appleResponse.environment || 'production',
      receiptData: appleResponse.latest_receipt || appleResponse.receipt,
      autoRenewStatus: this.getAutoRenewStatus(pending_renewal_info, latestReceipt.original_transaction_id)
    };

    // Verificar si la suscripci√≥n est√° activa
    const now = new Date();
    subscriptionInfo.isActive = subscriptionInfo.expiresDate > now;

    console.log('‚úÖ Suscripci√≥n procesada:', {
      productId: subscriptionInfo.productId,
      isActive: subscriptionInfo.isActive,
      expiresDate: subscriptionInfo.expiresDate.toISOString()
    });

    return subscriptionInfo;
  }

  /**
   * Verifica si el recibo contiene una suscripci√≥n v√°lida
   * @param {Object} receipt - Informaci√≥n del recibo
   * @returns {boolean} - Si es una suscripci√≥n v√°lida
   */
  isValidSubscription(receipt) {
    const validProductIds = ['fitso_premium_monthly', 'fitso_premium_yearly'];
    return validProductIds.includes(receipt.product_id);
  }

  /**
   * Obtiene el estado de renovaci√≥n autom√°tica
   * @param {Array} pendingRenewalInfo - Informaci√≥n de renovaciones pendientes
   * @param {string} originalTransactionId - ID de transacci√≥n original
   * @returns {boolean} - Estado de renovaci√≥n autom√°tica
   */
  getAutoRenewStatus(pendingRenewalInfo, originalTransactionId) {
    if (!pendingRenewalInfo || pendingRenewalInfo.length === 0) {
      return true; // Por defecto asumir que est√° activa
    }

    const renewalInfo = pendingRenewalInfo.find(
      info => info.original_transaction_id === originalTransactionId
    );

    return renewalInfo ? renewalInfo.auto_renew_status === '1' : true;
  }

  /**
   * Obtiene mensaje de error basado en el c√≥digo de estado de Apple
   * @param {number} status - C√≥digo de estado de Apple
   * @returns {string} - Mensaje de error
   */
  getStatusErrorMessage(status) {
    const errorMessages = {
      21000: 'El recibo enviado no es v√°lido',
      21002: 'Los datos del recibo no est√°n en formato correcto',
      21003: 'El recibo no se pudo autenticar',
      21004: 'La contrase√±a compartida no coincide',
      21005: 'El recibo no est√° disponible',
      21006: 'El recibo es v√°lido pero la suscripci√≥n ha expirado',
      21007: 'El recibo es del entorno de sandbox',
      21008: 'El recibo es del entorno de producci√≥n',
      21009: 'Datos internos no disponibles',
      21010: 'El usuario no est√° autorizado'
    };

    return errorMessages[status] || `Error desconocido (${status})`;
  }

  /**
   * Verifica si un recibo es de sandbox basado en el environment
   * @param {string} environment - Entorno del recibo
   * @returns {boolean} - Si es sandbox
   */
  isSandboxEnvironment(environment) {
    return environment === 'Sandbox';
  }
}

module.exports = new AppleReceiptService();
