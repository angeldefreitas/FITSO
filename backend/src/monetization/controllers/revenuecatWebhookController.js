const AffiliateService = require('../services/affiliateService');
const { query } = require('../../config/database');

class RevenueCatWebhookController {
  /**
   * Procesar webhook de RevenueCat
   * POST /api/webhooks/revenuecat
   */
  async handleWebhook(req, res) {
    try {
      // Validar secreto de RevenueCat para seguridad
      const webhookSecret = process.env.REVENUECAT_WEBHOOK_SECRET;
      const authHeader = req.headers['authorization'] || req.headers['Authorization'];
      
      // Logging para debugging
      console.log('üîç [REVENUECAT] Validando webhook...');
      console.log('üîë [REVENUECAT] Webhook secret configurado:', webhookSecret ? 'S√≠' : 'No');
      console.log('üì® [REVENUECAT] Authorization header recibido:', authHeader ? `${authHeader.substring(0, 20)}...` : 'No presente');
      
      if (webhookSecret && authHeader) {
        // Normalizar el header (quitar espacios extras, manejar may√∫sculas/min√∫sculas)
        const normalizedHeader = authHeader.trim();
        const expectedAuth = `Bearer ${webhookSecret}`;
        
        // Comparar de forma flexible (sin importar may√∫sculas/min√∫sculas en "Bearer")
        const headerParts = normalizedHeader.split(' ');
        const receivedSecret = headerParts.length > 1 ? headerParts.slice(1).join(' ') : normalizedHeader;
        
        // Comparar el secret (la parte despu√©s de "Bearer")
        if (receivedSecret.trim() !== webhookSecret.trim()) {
          console.error('‚ùå [REVENUECAT] Authorization inv√°lida');
          console.error('‚ùå [REVENUECAT] Esperado:', `Bearer ${webhookSecret.substring(0, 10)}...`);
          console.error('‚ùå [REVENUECAT] Recibido:', `${authHeader.substring(0, 30)}...`);
          
          // IMPORTANTE: En desarrollo/sandbox, permitir continuar para debugging
          // En producci√≥n, deber√≠a rechazar
          const isDevelopment = process.env.NODE_ENV !== 'production';
          if (isDevelopment) {
            console.warn('‚ö†Ô∏è [REVENUECAT] Modo desarrollo: continuando sin validaci√≥n estricta');
          } else {
            return res.status(401).json({
              success: false,
              message: 'Unauthorized'
            });
          }
        } else {
          console.log('‚úÖ [REVENUECAT] Authorization v√°lida');
        }
      } else if (webhookSecret && !authHeader) {
        console.warn('‚ö†Ô∏è [REVENUECAT] Webhook secret configurado pero no se recibi√≥ header Authorization');
        console.warn('‚ö†Ô∏è [REVENUECAT] Continuando sin validaci√≥n (modo permisivo para testing)');
      }

      const payload = req.body;
      
      console.log('üì® [REVENUECAT] Webhook recibido');
      console.log('üìã [REVENUECAT] Payload:', JSON.stringify(payload, null, 2));

      // Validar que el evento tenga la estructura correcta
      if (!payload || !payload.event) {
        console.error('‚ùå [REVENUECAT] Payload inv√°lido:', payload);
        return res.status(400).json({
          success: false,
          message: 'Payload inv√°lido'
        });
      }

      // Extraer informaci√≥n del evento
      const eventData = payload.event;
      const eventType = eventData.type;
      
      // Informaci√≥n del usuario y suscripci√≥n
      const appUserId = eventData.app_user_id;
      const productId = eventData.product_id;
      const transactionId = eventData.id;
      const price = eventData.price || eventData.price_in_purchased_currency || 0;
      const currency = eventData.currency || 'USD';

      console.log(`üì® [REVENUECAT] Tipo de evento: ${eventType}`);
      console.log(`üë§ [REVENUECAT] Usuario: ${appUserId}`);
      console.log(`üì¶ [REVENUECAT] Producto: ${productId}`);
      console.log(`üí∞ [REVENUECAT] Precio: ${price} ${currency}`);

      // Procesar seg√∫n el tipo de evento
      switch (eventType) {
        case 'TEST':
          console.log('‚úÖ [REVENUECAT] Evento de prueba recibido correctamente');
          console.log('‚ÑπÔ∏è [REVENUECAT] Los eventos TEST son de RevenueCat para verificar que el webhook funciona');
          console.log('‚ÑπÔ∏è [REVENUECAT] Este NO es un evento de compra real - no se procesar√°');
          break;

        case 'INITIAL_PURCHASE':
          console.log('üéâ [REVENUECAT] Compra inicial detectada - procesando...');
          await this.handleInitialPurchase(appUserId, transactionId, price, productId);
          break;
        
        case 'RENEWAL':
          await this.handleRenewal(appUserId, transactionId, price, productId);
          break;
        
        case 'CANCELLATION':
          await this.handleCancellation(appUserId, transactionId);
          break;
        
        case 'EXPIRATION':
          await this.handleExpiration(appUserId, transactionId);
          break;
        
        case 'BILLING_ISSUE':
          await this.handleBillingIssue(appUserId, transactionId);
          break;
        
        case 'NON_RENEWING_PURCHASE':
          console.log('‚ÑπÔ∏è [REVENUECAT] Compra no renovable, no se genera comisi√≥n recurrente');
          break;
        
        default:
          console.log(`‚ö†Ô∏è [REVENUECAT] Evento no manejado: ${eventType}`);
      }

      // Responder siempre con 200 para que RevenueCat no reintente
      res.status(200).json({
        success: true,
        message: 'Webhook procesado'
      });

    } catch (error) {
      console.error('‚ùå [REVENUECAT] Error procesando webhook:', error);
      
      // A√∫n as√≠ responder con 200 para evitar reintentos innecesarios
      res.status(200).json({
        success: false,
        message: 'Error procesado internamente'
      });
    }
  }

  /**
   * Manejar compra inicial (primera vez que el usuario se hace premium)
   */
  async handleInitialPurchase(appUserId, transactionId, price, productId) {
    try {
      console.log('üéâ [REVENUECAT] Primera compra detectada');
      console.log('üë§ [REVENUECAT] App User ID:', appUserId);
      console.log('üì¶ [REVENUECAT] Product ID:', productId);
      console.log('üí∞ [REVENUECAT] Price:', price);
      
      // IMPORTANTE: El appUserId que viene de RevenueCat es el ID del usuario en nuestra BD
      // Buscar el usuario por su ID (que deber√≠a coincidir con el app_user_id configurado)
      const userQuery = 'SELECT id, email, name FROM users WHERE id = $1';
      const userResult = await query(userQuery, [appUserId]);
      
      if (userResult.rows.length === 0) {
        console.error('‚ùå [REVENUECAT] Usuario no encontrado en BD con App User ID:', appUserId);
        console.log('‚ÑπÔ∏è [REVENUECAT] Esto puede ocurrir si el App User ID no coincide con el ID del usuario en la BD');
        console.log('‚ÑπÔ∏è [REVENUECAT] El webhook se procesar√° pero no se actualizar√° el usuario');
        return;
      }
      
      const user = userResult.rows[0];
      console.log('‚úÖ [REVENUECAT] Usuario encontrado:', user.email, user.name);
      
      // Determinar tipo de suscripci√≥n
      const subscriptionType = productId.toLowerCase().includes('monthly') ? 'monthly' : 'yearly';
      
      // Procesar comisi√≥n de conversi√≥n
      const commission = await AffiliateService.processPremiumConversion(
        appUserId,
        transactionId,
        price,
        subscriptionType
      );

      if (commission) {
        console.log(`‚úÖ [REVENUECAT] Comisi√≥n inicial generada: $${commission.commission_amount}`);
      } else {
        console.log('‚ÑπÔ∏è [REVENUECAT] Usuario sin c√≥digo de referencia o c√≥digo inv√°lido');
      }
      
      // El estado premium se maneja autom√°ticamente por:
      // 1. RevenueCat SDK en la app (actualiza el estado local)
      // 2. La tabla subscriptions (si existe una suscripci√≥n activa, el usuario es premium)
      // 3. is_affiliate o is_admin en users (otorgan premium autom√°tico)
      
      console.log('‚úÖ [REVENUECAT] Compra inicial procesada correctamente');
      console.log('‚ÑπÔ∏è [REVENUECAT] El estado premium se actualizar√° autom√°ticamente en la app cuando verifique con RevenueCat');

    } catch (error) {
      console.error('‚ùå [REVENUECAT] Error en handleInitialPurchase:', error);
      throw error;
    }
  }

  /**
   * Manejar renovaci√≥n de suscripci√≥n
   */
  async handleRenewal(userId, transactionId, price, productId) {
    try {
      console.log('üîÑ [REVENUECAT] Renovaci√≥n detectada');
      
      // Determinar tipo de suscripci√≥n
      const subscriptionType = productId.toLowerCase().includes('monthly') ? 'monthly' : 'yearly';
      
      // Procesar comisi√≥n recurrente
      const commission = await AffiliateService.processSubscriptionRenewal(
        userId,
        transactionId,
        price,
        subscriptionType
      );

      if (commission) {
        console.log(`‚úÖ [REVENUECAT] Comisi√≥n recurrente generada: $${commission.commission_amount}`);
      } else {
        console.log('‚ÑπÔ∏è [REVENUECAT] Usuario sin c√≥digo de referencia o comisi√≥n ya existe para este per√≠odo');
      }

    } catch (error) {
      console.error('‚ùå [REVENUECAT] Error en handleRenewal:', error);
      throw error;
    }
  }

  /**
   * Manejar cancelaci√≥n de suscripci√≥n
   */
  async handleCancellation(userId, transactionId) {
    try {
      console.log('‚ùå [REVENUECAT] Cancelaci√≥n detectada');
      
      // Aqu√≠ podr√≠as marcar que no se deben generar m√°s comisiones
      // O enviar notificaci√≥n al afiliado
      
      console.log(`‚ÑπÔ∏è [REVENUECAT] Usuario ${userId} cancel√≥ suscripci√≥n`);
      console.log(`‚ÑπÔ∏è [REVENUECAT] No se generar√°n m√°s comisiones autom√°ticamente`);

    } catch (error) {
      console.error('‚ùå [REVENUECAT] Error en handleCancellation:', error);
      throw error;
    }
  }

  /**
   * Manejar expiraci√≥n de suscripci√≥n
   */
  async handleExpiration(userId, transactionId) {
    try {
      console.log('‚è∞ [REVENUECAT] Expiraci√≥n detectada');
      
      console.log(`‚ÑπÔ∏è [REVENUECAT] Suscripci√≥n de usuario ${userId} expir√≥`);
      console.log(`‚ÑπÔ∏è [REVENUECAT] No se generar√°n m√°s comisiones hasta que renueve`);

    } catch (error) {
      console.error('‚ùå [REVENUECAT] Error en handleExpiration:', error);
      throw error;
    }
  }

  /**
   * Manejar problema de facturaci√≥n
   */
  async handleBillingIssue(userId, transactionId) {
    try {
      console.log('‚ö†Ô∏è [REVENUECAT] Problema de facturaci√≥n detectado');
      
      console.log(`‚ö†Ô∏è [REVENUECAT] Usuario ${userId} tiene problemas de pago`);
      console.log(`‚ÑπÔ∏è [REVENUECAT] Comisiones pausadas hasta que se resuelva`);

    } catch (error) {
      console.error('‚ùå [REVENUECAT] Error en handleBillingIssue:', error);
      throw error;
    }
  }

  /**
   * Endpoint de prueba para verificar que el webhook est√° funcionando
   * GET /api/webhooks/revenuecat/test
   */
  async testWebhook(req, res) {
    try {
      res.json({
        success: true,
        message: 'Webhook de RevenueCat funcionando correctamente',
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      res.status(500).json({
        success: false,
        message: 'Error en webhook de RevenueCat'
      });
    }
  }
}

module.exports = new RevenueCatWebhookController();

