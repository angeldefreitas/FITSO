import AsyncStorage from '@react-native-async-storage/async-storage';
import { getUserProfile } from '../lib/userProfile';
import { ProgressService } from '../services/progressService';

const USER_PROFILE_KEY = '@fitso_user_profile';

export const debugProfileSync = async (): Promise<void> => {
  console.log('üîç === DIAGN√ìSTICO COMPLETO DEL PERFIL ===');
  
  try {
    // 1. Verificar perfil usando la funci√≥n oficial
    console.log('\n1Ô∏è‚É£ Verificando perfil con getUserProfile():');
    const profile = await getUserProfile();
    if (profile) {
      console.log('‚úÖ Perfil encontrado:');
      console.log('  - ID:', profile.id);
      console.log('  - Nombre:', profile.name);
      console.log('  - Peso:', profile.weight, 'kg');
      console.log('  - Altura:', profile.height, 'cm');
      console.log('  - √öltima actualizaci√≥n:', profile.lastUpdated);
    } else {
      console.log('‚ùå No se encontr√≥ perfil');
    }

    // 2. Verificar directamente en AsyncStorage
    console.log('\n2Ô∏è‚É£ Verificando AsyncStorage directamente:');
    const rawProfile = await AsyncStorage.getItem(USER_PROFILE_KEY);
    if (rawProfile) {
      const parsedProfile = JSON.parse(rawProfile);
      console.log('‚úÖ Datos en AsyncStorage:');
      console.log('  - Peso:', parsedProfile.weight, 'kg');
      console.log('  - √öltima actualizaci√≥n:', parsedProfile.lastUpdated);
    } else {
      console.log('‚ùå No se encontraron datos en AsyncStorage');
    }

    // 3. Verificar registros de peso
    console.log('\n3Ô∏è‚É£ Verificando registros de peso:');
    const weightEntries = await ProgressService.getWeightEntries();
    console.log(`üìä Total de registros: ${weightEntries.length}`);
    
    if (weightEntries.length > 0) {
      const latest = weightEntries[0];
      console.log('üìà √öltimo registro:');
      console.log('  - Peso:', latest.value, 'kg');
      console.log('  - Fecha:', latest.date);
      console.log('  - Timestamp:', new Date(latest.timestamp).toLocaleString());
      
      // Verificar si es de hoy
      const isToday = ProgressService.isToday(latest.date);
      console.log('üìÖ ¬øEs de hoy?', isToday);
    }

    // 4. Verificar todas las claves en AsyncStorage
    console.log('\n4Ô∏è‚É£ Verificando todas las claves de AsyncStorage:');
    const allKeys = await AsyncStorage.getAllKeys();
    const profileKeys = allKeys.filter(key => key.includes('profile') || key.includes('user'));
    console.log('üîë Claves relacionadas con perfil:', profileKeys);

    // 5. Verificar si hay inconsistencias
    console.log('\n5Ô∏è‚É£ Verificando inconsistencias:');
    if (profile && rawProfile) {
      const parsedProfile = JSON.parse(rawProfile);
      const weightMatch = profile.weight === parsedProfile.weight;
      console.log('‚öñÔ∏è ¬øPeso coincide?', weightMatch);
      
      if (!weightMatch) {
        console.log('‚ùå INCONSISTENCIA DETECTADA:');
        console.log('  - getUserProfile():', profile.weight, 'kg');
        console.log('  - AsyncStorage directo:', parsedProfile.weight, 'kg');
      }
    }

    console.log('\n‚úÖ === FIN DEL DIAGN√ìSTICO ===');
    
  } catch (error) {
    console.error('‚ùå Error en diagn√≥stico:', error);
  }
};

export const forceSyncProfile = async (): Promise<boolean> => {
  try {
    console.log('üîÑ === FORZANDO SINCRONIZACI√ìN ===');
    
    // Obtener el √∫ltimo peso registrado
    const weightEntries = await ProgressService.getWeightEntries();
    if (weightEntries.length === 0) {
      console.log('‚ùå No hay registros de peso');
      return false;
    }

    const latestWeight = weightEntries[0];
    console.log('üìä √öltimo peso:', latestWeight.value, 'kg el', latestWeight.date);
    
    // Verificar si es de hoy
    const isToday = ProgressService.isToday(latestWeight.date);
    console.log('üìÖ ¬øEs de hoy?', isToday);
    
    if (!isToday) {
      console.log('‚ÑπÔ∏è El √∫ltimo peso no es de hoy, no actualizando perfil');
      return false;
    }

    // Actualizar perfil
    console.log('üîÑ Actualizando perfil...');
    await ProgressService.updateUserProfileWeight(latestWeight.value);
    
    // Verificar actualizaci√≥n
    const updatedProfile = await getUserProfile();
    if (updatedProfile && updatedProfile.weight === latestWeight.value) {
      console.log('‚úÖ Perfil actualizado exitosamente');
      return true;
    } else {
      console.log('‚ùå Error: El perfil no se actualiz√≥ correctamente');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Error forzando sincronizaci√≥n:', error);
    return false;
  }
};
